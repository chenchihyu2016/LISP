(defparameter value 1)
(defparameter *ALines* 0)
(defparameter *BLines* 0)
( let ((in (open "file1.txt" )))
  (when in
    (loop for line = (read-line in nil)
      while line do (setf *Alines* (+ *Alines* 1))
    )
  )
  (close in)
)
( let ((star (open "file2.txt" )))
  (when star
    (loop for line = (read-line star nil)
      while line do (setf *Blines* (+ *Blines* 1))
    )
  )
  (close star)
)

(defun print_secA (start end)
  (setf start (+ start 1))
  (setf end (- end 1))
  ( let ((in (open "file1.txt" )))
    (when in
      (
        loop for line = (read-line in nil)
        while line do
          (if (< value start)
            (setf value (+ value 1))
            (if (<= value end)
              ( progn
                (format t "~c[32m~a~c[0m~%" #\ESC line #\ESC)
                (setf value (+ value 1))
              )
            )
          )
        )
    )
  (close in)
  )
  (setf value 1)
)

(defun print_same (end)
  ( let ((in (open "file1.txt" )))
    (when in
      (
        loop for line = (read-line in nil)
        while line do
          (if (< value end)
            (setf value (+ value 1))
            (if (= value end)(progn
                (format t " ~a~%" line)
                (setf value (+ value 1))
              )
            )
          )
        )
    )
  (close in)
  )
  (setf value 1)
)

(defun print_secB (start end)
  (setf start (+ start 1))
  (setf end (- end 1))
  ( let ((in (open "file2.txt" )))
    (when in
      (
        loop for line = (read-line in nil)
        while line do
          (if (< value start)
            (setf value (+ value 1))
            (if (<= value end)
              ( progn
                (format t "~c[36m~a~c[0m~%" #\ESC line #\ESC)
                (setf value (+ value 1))
              )
            )
          )
        )
    )
  (close in)
  )
  (setf value 1)
)

(defparameter currentA 0)
(defparameter llstA '(nil))
(defparameter overlookA 1)
(defparameter recordA 0)
(defparameter tempA 1)
( let ((in (open "file1.txt" )))
  (when in
    (loop for lineOne = (read-line in nil)
      while lineOne do
        (setf currentA (+ currentA 1))
        (setf tempA 1)
        (setf recordA (- overlookA 1))
        (let ((star (open "file2.txt" )))
          (when star
            (loop for lineTwo = (read-line star nil)
              while lineTwo do
                (if (< tempA overlookA)
                  (setf tempA (+ tempA 1))
                  (if (string= lineOne lineTwo)
                    (progn
                      (push currentA (car llstA))
                      (setf recordA (+ recordA 2))
                      (setf overlookA recordA)
                    )
                    (setf recordA (+ recordA 1))
                  )
                )
            )
          (close star)
          )
        )
    )
    (close in)
  )
)


(defparameter currentB 0)
(defparameter llstB '(nil))
(defparameter overlookB 1)
(defparameter recordB 0)
(defparameter tempB 1)
( let ((in (open "file2.txt" )))
  (when in
    (loop for lineOne = (read-line in nil)
      while lineOne do
        (setf currentB (+ currentB 1))
        (setf tempB 1)
        (setf recordB (- overlookB 1))
        (let ((star (open "file1.txt" )))
          (when star
            (loop for lineTwo = (read-line star nil)
              while lineTwo do
                (if (< tempB overlookB)
                  (setf tempB (+ tempB 1))
                  (if (string= lineOne lineTwo)
                    (progn
                      (push currentB (car llstB))
                      (setf recordB (+ recordB 2))
                      (setf overlookB recordB)
                    )
                    (setf recordB (+ recordB 1))
                  )
                )
            )
          (close star)
          )
        )
    )
    (close in)
  )
)

(defparameter Alist (reverse(car llstA)))
(defparameter Blist (reverse(car llstB)))

(push 0 Alist)
(push 0 Blist)
(defparameter Astart 0)
(defparameter Aend 0)
(defparameter Abreak 0)
(defparameter Bstart 0)
(defparameter Bend 0)
(defparameter Bbreak 0)
(defparameter temper -1)
( let ((in (open "file1.txt" ))(star (open "file2.txt")))
  (dolist (x Alist)
    (if (< x *ALines*)
      (progn
        (setf Astart x)
        (setf Abreak 0)
        (dolist (y Alist)
          (if (and (> y x) (= Abreak 0))
            (progn
                (setf Aend y)
                (setf Abreak 1)
            )
          )

        )
        (print_secA Astart Aend)
        (setf Bbreak 0)
        (dolist (u Blist)
          (if (and (> u temper)(< u *BLines*)(= Bbreak 0))
            (progn
              (setf Bstart u)
              (setf Bbreak 0)
              (dolist (v Blist)
                (if (and (> v u)(= Bbreak 0))
                  ( progn
                    (setf Bend v)
                    (setf Bbreak 1)
                    (setf temper u)
                    (print_secB Bstart Bend)
                    (print_same Aend)
                  )
                )
              )
            )
          )
        )
      )
    )
  )
  (setf *ALines* (+ *ALines* 1))
  (setf *BLines* (+ *BLines* 1))
  (if (= Aend *ALines*)()(print_secA Aend *ALines*))
  (if (= Bend *BLines*)()(print_secB Bend *BLines*))
)
